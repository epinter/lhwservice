cmake_minimum_required(VERSION VERSION 3.24)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_INTERPROCEDURAL_OPTIMIZATION ON)

set(MAINTARGET "${PROJECT_NAME}")
set(MAINTARGET "${MAINTARGET}" PARENT_SCOPE)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

message("TARGET=${MAINTARGET}")

file(GLOB_RECURSE PUBLIC_HEADER_FILES
	LIST_DIRECTORIES false
	CONFIGURE_DEPENDS
	"${CMAKE_SOURCE_DIR}/include/*.h"
	)

file(GLOB_RECURSE HEADER_FILES
	LIST_DIRECTORIES false
	CONFIGURE_DEPENDS
	"${CMAKE_CURRENT_SOURCE_DIR}/*.h"
	)

file(GLOB_RECURSE SOURCE_FILES
	LIST_DIRECTORIES false
	CONFIGURE_DEPENDS
	"${CMAKE_CURRENT_SOURCE_DIR}/*.cpp"
	"${CMAKE_CURRENT_SOURCE_DIR}/*.cc")

source_group("Source"
	FILES
	${PUBLIC_HEADER_FILES}
	${HEADER_FILES}
	${SOURCE_FILES})

set_property(GLOBAL PROPERTY LHWSERVICE_SOURCEFILES ${SOURCE_FILES})

message("C++ Compiler (${CMAKE_CXX_COMPILER_ID}) ${CMAKE_CXX_COMPILER}")
if (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC" OR CMAKE_C_COMPILER_ID STREQUAL "MSVC")
    message("MSVC compiler")
else()
    if (CMAKE_CXX_COMPILER_FRONTEND_VARIANT STREQUAL "MSVC") # clang-cl
        message("Clang++ frontend variant = MSVC (clang-cl)")
        add_compile_options(-Wno-unused-private-field)
    elseif (CMAKE_CXX_COMPILER_FRONTEND_VARIANT STREQUAL "GNU") #gnu
        message("CLANG++ frontend variant = GNU")
		add_compile_options(-Wno-unused-private-field)
    endif()
endif()

if (BUILD_SHARED_LIBS)
    add_library(${MAINTARGET} SHARED ${SOURCE_FILES} ${CMAKE_BINARY_DIR}/cmake/version.rc)
else ()
    add_library(${MAINTARGET} STATIC ${SOURCE_FILES} ${CMAKE_BINARY_DIR}/cmake/version.rc)
endif ()

target_compile_features(${MAINTARGET} PUBLIC cxx_std_${CMAKE_CXX_STANDARD})
target_compile_definitions(${MAINTARGET} PRIVATE "$<$<CONFIG:Debug>:DEBUGBUILD>")
set_property(TARGET ${MAINTARGET} PROPERTY DEBUG_POSTFIX -d)

message("VCPKG_TARGET_TRIPLET=${VCPKG_TARGET_TRIPLET}")
message("CMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}")

set(Boost_NO_WARN_NEW_VERSIONS 1)
set(Boost_USE_STATIC_LIBS ON)
set(Boost_USE_MULTITHREADED  ON)
find_package(Boost REQUIRED COMPONENTS thread json)
if(Boost_FOUND)
    target_link_libraries(${MAINTARGET} PRIVATE ${Boost_LIBRARIES})
    target_include_directories(${MAINTARGET} PRIVATE ${Boost_INCLUDE_DIRS})
endif()


set(MSGPACK_CXX17 ON)
set(MSGPACK_USE_X3_PARSE ON)
set(MSGPACK_USE_STATIC_BOOST ON)
find_package(msgpack-cxx CONFIG REQUIRED)
if(msgpack-cxx_FOUND)
	target_include_directories(${MAINTARGET} PRIVATE ${msgpack_LIBRARIES})
    target_link_libraries(${MAINTARGET} PRIVATE ${msgpack_INCLUDE_DIRS})
endif()

set_property(GLOBAL APPEND PROPERTY LHWSERVICE_PRIV_INCLUDEDIRS "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>")
set_property(GLOBAL APPEND PROPERTY LHWSERVICE_PRIV_INCLUDEDIRS "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../include>")
set_property(GLOBAL APPEND PROPERTY LHWSERVICE_PUB_INCLUDEDIR "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../include>")

if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/src/pch.h")
    target_precompile_headers(${PROJECT_NAME} PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/pch.h")
endif()

target_include_directories(${MAINTARGET} PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}"
        #when the library part of another source tree
        PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../include>
        #when external projects search for the library
        $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)

set(CPACK_GENERATOR ZIP)
set(CPACK_PACKAGE_NAME ${PROJECT_LONG_NAME})
set(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${CMAKE_PROJECT_VERSION}-${TARGET_ARCHITECTURE}")
set(CPACK_INCLUDE_TOPLEVEL_DIRECTORY 0)
include(CPack)
